import { Request, Response } from 'express'
import { DTO } from '../../helpers/dto'
import { CustomError } from '../../helpers/errors/errors'
import { CreateTemplateDTO } from './dto/create-template.dto'
import { TemplateService } from './services/template.service'
import TemplateTransformer from './transformers/template.transformer'

class TemplateController {
  private readonly templateService: TemplateService

  constructor () {
    this.templateService = new TemplateService()
    this.create = this.create.bind(this)
    this.get = this.get.bind(this)
    this.getAll = this.getAll.bind(this)
  }

  async create (req: Request, res: Response): Promise<void> {
    const dto = await DTO.factory(CreateTemplateDTO, req.body)
    await this.templateService.create(dto)
    res.sendStatus(201)
  }

  async getAll (req: Request, res: Response): Promise<void> {
    const user = req.auth.user
    await this.templateService.getAll(user)
    res.sendStatus(201)
  }

  async get (req: Request, res: Response): Promise<void> {
    const template = req.extended.template
    if (template === null || template === undefined) throw new CustomError().withError('not_found').withDetail('Template not found.')

    res.json(TemplateTransformer.item(template))
  }

  async delete (req: Request, res: Response): Promise<void> {
    const template = req.extended.template
    if (template === null || template === undefined) throw new CustomError().withError('not_found').withDetail('Template not found.')

    await this.templateService.delete(template)
    res.sendStatus(204)
  }
}

export default new TemplateController()
